# Docker specific setup
user              nginx;
#worker_processes 16;  # set via commend line
daemon off;
error_log         /dev/stdout warn;
pid               /tmp/nginx.pid;

# 1. Increase fd limit in /etc/security/limits.conf
# 2. Enable pam limits, see http://unix.stackexchange.com/a/169006
# 3. verify: for i in `pgrep nginx`; do cat /proc/$i/limits | grep open; done
worker_rlimit_nofile 120000;

events {
    worker_connections 4096;
}

http {
    # send log to stdout so Docker can handle it
    access_log /dev/stdout;

    # enhance performance
    sendfile            on;
    aio                 on;
    tcp_nopush          on;
    tcp_nodelay         on;
    types_hash_max_size 2048;

    # do not publish the server version we're using
    server_tokens off;

    # generic ddos-protection parameters
    client_body_buffer_size     1K;
    client_header_buffer_size   1k;
    client_max_body_size        16m;         # required for file uploads :(
    large_client_header_buffers 2 1k;
    keepalive_timeout           65 60;       # make value we officially send smaller than what we accept
    client_body_timeout         10;
    client_header_timeout       10;
    send_timeout                10;
    limit_conn_zone             $binary_remote_addr zone=climits:5m;
    
    #extremely higher values to secure availability in student dorms and lower it in future
    limit_req_zone              $binary_remote_addr zone=rlimits_generic:10m rate=30r/s;
    limit_req_zone              $binary_remote_addr zone=rlimits_uwsgi:10m rate=7r/s;
    limit_conn                  climits 60;  # make it higher than normal because many students use shared IPs
    limit_req                   zone=rlimits_generic burst=10;

    # mime type handling
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    types {
        application/font-woff2 woff2;
    }

    # compression support
    gzip            on;
    gzip_static     on;
    gzip_disable    "msie6";
    gzip_vary       on;
    gzip_comp_level 9;
    gzip_proxied    any;
    gzip_types      text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    # ssl files
    ssl_certificate     /etc/nginx/ssl/main.crt+chain.pem;
    ssl_certificate_key /etc/nginx/ssl/main.key.pem;
    ssl_dhparam         /etc/nginx/ssl/dhparam.pem;

    # ssl parameters -- (partly) taken from BetterCrypte (2016-02-24)
    ssl_session_cache         shared:SSL:10m;
    ssl_session_timeout       5m;
    ssl_buffer_size           4k;
    ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers               'EDH+CAMELLIA:EDH+aRSA:EECDH+aRSA+AESGCM:EECDH+aRSA+SHA256:EECDH:+CAMELLIA128:+AES128:+SSLv3:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!DSS:!RC4:!SEED:!IDEA:!ECDSA:kEDH:CAMELLIA128-SHA:AES128-SHA';  # configuration B (weaker but compat)
    ssl_ecdh_curve secp384r1;  # use a NIST curve until an alternative like curve25519 is usable
    ssl_prefer_server_ciphers on;

    # default server to catch probes without correct location (incorrect or missing)
    # this prevents us from some security scans but also from from being abused as a hosting platform (e.g. for JS files)
    server {
        listen 80 default_server reuseport;
        listen 443 default_server ssl http2 reuseport;
        server_name _;

        # INFO: actually we don't present the right TLS cert here (not valid for every domain), but it's better than
        #       some self-signed solution. Also it's important to use the same secure SSL configs as for the main
        #       domain because otherwise we might run into attacks like DROWN.

        return 404;
    }

    # HTTP->HTTPS redirect
    server {
        listen 80;  # no options required here, they're inhered from default_server
#        server_name "anmeldung.spz.kit.edu";
        server_name "localhost";
        return 301 https://$server_name$request_uri;
    }

    # HTTPS/HTTP2 server
    server {
        listen 443;  # no options required here, they're inhered from default_server

#        server_name "anmeldung.spz.kit.edu";
        server_name "localhost";

        # limit request methods
        if ($request_method !~ ^(GET|HEAD|POST)$ ) {
            return 405;
        }

        # multiplex different paths => default to uwsgi
        location / {
            # prevent ddos to uwsgi backend
            limit_req      zone=rlimits_uwsgi burst=6;

            # setup for uwsgi backend
            include uwsgi_params;
            uwsgi_pass uwsgi:3031;
        }

        # serve static files directly (no uwsgi request)
        location /static/ {
            expires +1w;
            alias /static/;
        }

        # "hidden" stats website, no critical information here
        location /_stats {
            stub_status on;
        }

        # security headers
        add_header 'Allow'                     'GET, HEAD, POST'                     always;  # this is also required because we might return 405
        add_header 'X-Frame-Options'           'deny'                                always;
        add_header 'X-Content-Type-Options'    'nosniff'                             always;
        add_header 'X-Download-Options'        'noopen'                              always;
        add_header 'X-XSS-Protection'          '1; mode=block'                       always;
        add_header 'Content-Security-Policy'   "default-src 'self'; font-src 'self' data:; frame-ancestors 'none'; form-action 'self'; upgrade-insecure-requests; block-all-mixed-content; referrer origin;" always;
        add_header 'Strict-Transport-Security' 'max-age=17280000; includeSubdomains' always;

        # of course he we have to be a bit silly!
        add_header 'X-Powered-By'              'Unicorns'                            always;
    }
}
